#!/usr/bin/env python
# coding: utf-8

import json
import logging
import os
import sys
import time
import uuid
from pathlib import Path

from azure.identity import DefaultAzureCredential
import requests

# Set environment variables
os.environ['SPEECH_ENDPOINT'] = ''  # Removed trailing slash
os.environ['SPEECH_REGION'] = 'westus2'
os.environ['SPEECH_KEY'] = ''

# Logging configuration
logging.basicConfig(stream=sys.stdout, level=logging.INFO,  # set to logging.DEBUG for verbose output
                    format="[%(asctime)s] %(message)s", datefmt="%m/%d/%Y %I:%M:%S %p %Z")
logger = logging.getLogger(__name__)

# Fetching environment variables
SPEECH_ENDPOINT = os.environ.get('SPEECH_ENDPOINT')
PASSWORDLESS_AUTHENTICATION = True

if not SPEECH_ENDPOINT:
    if PASSWORDLESS_AUTHENTICATION:
        logger.error('SPEECH_ENDPOINT is required for passwordless authentication')
        sys.exit(1)
    SERVICE_REGION = os.environ.get('SPEECH_REGION')
    SPEECH_ENDPOINT = f'https://{SERVICE_REGION}.api.cognitive.microsoft.com'
if not PASSWORDLESS_AUTHENTICATION:
    SUBSCRIPTION_KEY = os.environ.get('SPEECH_KEY')

API_VERSION = "2024-04-01"

def _create_job_id():
    # the job ID must be unique in current speech resource
    return uuid.uuid4()

def _authenticate():
    if PASSWORDLESS_AUTHENTICATION:
        credential = DefaultAzureCredential()
        token = credential.get_token('https://cognitiveservices.azure.com/.default')
        return {'Authorization': f'Bearer {token.token}'}
    else:
        return {'Ocp-Apim-Subscription-Key': SUBSCRIPTION_KEY}

def submit_synthesis(job_id: str) -> bool:
    url = f'{SPEECH_ENDPOINT}/texttospeech/batchsyntheses/{job_id}?api-version={API_VERSION}'
    header = {
        'Content-Type': 'application/json'
    }
    header.update(_authenticate())

    # Minimal valid text content
    text = "Hello, this is a test synthesis."

    payload = {
        "inputKind": "PlainText",  # or SSML
        'synthesisConfig': {
            "voice": "en-US-AvaMultilingualNeural",
        },
        "inputs": [
            {
                "content": text
            },
        ],
        "properties": {
            "outputFormat": "audio-24khz-160kbitrate-mono-mp3",
        },
    }

    # Debugging: print the URL, headers, and payload
    print(f"URL: {url}")
    print(f"Headers: {header}")
    print(f"Payload: {json.dumps(payload, indent=2)}")

    response = requests.put(url, data=json.dumps(payload), headers=header)
    
    # Debugging: print the response status and content
    print(f"Response Status Code: {response.status_code}")
    print(f"Response Content: {response.text}")
    
    if response.status_code < 400:
        logger.info('Batch synthesis job submitted successfully')
        logger.info(f'Job ID: {response.json()["id"]}')
        return True
    else:
        logger.error(f'Failed to submit batch synthesis job: [{response.status_code}], {response.text}')
        return False

    # Debugging: print the URL, headers, and payload
    print(f"URL: {url}")
    print(f"Headers: {header}")
    print(f"Payload: {json.dumps(payload, indent=2)}")

    response = requests.put(url, data=json.dumps(payload), headers=header)
    
    # Debugging: print the response status and content
    print(f"Response Status Code: {response.status_code}")
    print(f"Response Content: {response.text}")
    
    if response.status_code < 400:
        logger.info('Batch synthesis job submitted successfully')
        logger.info(f'Job ID: {response.json()["id"]}')
        return True
    else:
        logger.error(f'Failed to submit batch synthesis job: [{response.status_code}], {response.text}')
        return False

def get_synthesis(job_id: str):
    url = f'{SPEECH_ENDPOINT}/texttospeech/batchsyntheses/{job_id}?api-version={API_VERSION}'
    header = _authenticate()
    response = requests.get(url, headers=header)
    if response.status_code < 400:
        logger.info('Get batch synthesis job successfully')
        logger.info(response.json())
        return response.json()['status']
    else:
        logger.error(f'Failed to get batch synthesis job: {response.text}')

def list_synthesis_jobs(skip: int = 0, max_page_size: int = 100):
    """List all batch synthesis jobs in the subscription"""
    url = f'{SPEECH_ENDPOINT}/texttospeech/batchsyntheses?api-version={API_VERSION}&skip={skip}&maxpagesize={max_page_size}'
    header = _authenticate()
    response = requests.get(url, headers=header)
    if response.status_code < 400:
        logger.info(f'List batch synthesis jobs successfully, got {len(response.json()["values"])} jobs')
        logger.info(response.json())
    else:
        logger.error(f'Failed to list batch synthesis jobs: {response.text}')

if __name__ == '__main__':
    job_id = _create_job_id()
    if submit_synthesis(job_id):
        while True:
            status = get_synthesis(job_id)
            if status == 'Succeeded':
                logger.info('Batch synthesis job succeeded')
                break
            elif status == 'Failed':
                logger.error('Batch synthesis job failed')
                break
            else:
                logger.info(f'Batch synthesis job is still running, status [{status}]')
                time.sleep(5)
